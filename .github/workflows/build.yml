name: PyInstaller
on:
  pull_request:
    types: [closed]
    branches: master
  push:
    branches: master

jobs:
  build-ubuntu:
    if: false
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          path: hydrus
      - 
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: Qt
          key: ${{ runner.os }}-QtCache
      - 
        name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          install-deps: true
          setup-python: 'false'
          modules: qtcharts qtwidgets qtgui qtcore
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Pip Installer
        uses: BSFishy/pip-action@v1
        with:
          packages: pyinstaller
          requirements: hydrus/requirements.txt
      - name: build with pyinstaller
        run: |
          cp hydrus/docker/pyinstaller/client.spec client.spec
          cp hydrus/docker/pyinstaller/server.spec server.spec
          pyinstaller server.spec
          pyinstaller client.spec
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Hydrus Ubuntu LTS Extract
          path: dist/client

  build-macos-sur:
    runs-on: [macos-11.0]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          path: hydrus
      - 
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: Qt
          key: ${{ runner.os }}-QtCache
      - 
        name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          install-deps: true
          setup-python: 'false'
          modules: qtcharts qtwidgets qtgui qtcore
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Pip Installer
        uses: BSFishy/pip-action@v1
        with:
          packages: pyinstaller
          requirements: hydrus/requirements.txt
      - name: build with pyinstaller
        run: |
          pyinstaller hydrus/client.py
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Hydrus MacOS Big Sur Extract
          path: dist/client

  build-macos-catalina:
    if: false
    runs-on: [macos-latest]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          path: hydrus
      - 
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: Qt
          key: ${{ runner.os }}-QtCache
      - 
        name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          install-deps: true
          setup-python: 'false'
          modules: qtcharts qtwidgets qtgui qtcore
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Pip Installer
        uses: BSFishy/pip-action@v1
        with:
          packages: pyinstaller
          requirements: hydrus/requirements.txt
      - name: build with pyinstaller
        run: |
          cp hydrus/docker/pyinstaller/client.spec client.spec
          cp hydrus/docker/pyinstaller/server.spec server.spec
          pyinstaller server.spec
          pyinstaller client.spec
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Hydrus MacOS Catalina Extract
          path: dist/client

  build-windows:
    if: false
    runs-on: [windows-latest]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          path: hydrus
      - 
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: Qt
          key: ${{ runner.os }}-QtCache
      - 
        name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          install-deps: true
          setup-python: 'false'
          modules: qtcharts qtwidgets qtgui qtcore
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Pip Installer
        uses: BSFishy/pip-action@v1
        with:
          packages: pyinstaller
          requirements: hydrus\requirements.txt
      - name: build with pyinstaller
        run: |
          move hydrus\docker\pyinstaller\client-win.spec client-win.spec
          move hydrus\docker\pyinstaller\server-win.spec server-win.spec
          pyinstaller server-win.spec
          pyinstaller client-win.spec
          dir -r
      - name: InnoSetup
        run: |
          move hydrus\docker\InnoSetup.iss InnoSetup.iss
          ISCC.exe InnoSetup.iss
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Hydrus Windows Extract
          path: dist\Hydrus Network
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Hydrus Windows Installer
          path: dist\Hydrus Network - Windows - Installer.exe

  check-artifacts:
    if: false
    name: Check Artifacts
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos-catalina, build-macos-sur, build-ubuntu]
    steps:
      - name: Get All Artifacts
        uses: actions/download-artifact@v2
      - name: Display structure of downloaded files
        run: ls -R

  create-release:
    if: false
    name: Create Release Entry
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Get All Artifacts
        uses: actions/download-artifact@v2
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./my-artifact.zip
          asset_name: my-artifact.zip
          asset_content_type: application/zip