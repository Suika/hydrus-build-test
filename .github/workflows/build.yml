name: Release
on:
  pull_request:
    types: [closed]
    branches: master
  push:
    branches: master

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: FedericoCarboni/setup-ffmpeg@v1
        id: setup_ffmpeg
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.2.0
      - name: rust-cargo
        uses: actions-rs/cargo@v1.0.3
        with:
          command: install
          args: pyoxidizer
      - name: Build Hydrus
        run: |
          cd $GITHUB_WORKSPACE
          cp ${{ steps.setup_ffmpeg.outputs.ffmpeg-path }} bin/
          cp static/build_files/macos/pyoxidizer.bzl pyoxidizer.bzl
          basename $(rustc --print sysroot) | sed -e "s/^stable-//" > triple.txt
          pyoxidizer build --release
          cd build/$(head -n 1 triple.txt)/release
          mkdir -p "Hydrus Network.app/Contents/MacOS"
          mkdir -p "Hydrus Network.app/Contents/Resources"
          mkdir -p "Hydrus Network.app/Contents/Frameworks"
          mv install/static/icon.icns "Hydrus Network.app/Contents/Resources/icon.icns"
          cat > "Hydrus Network.app/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleDisplayName</key>
            <string>client</string>
            <key>CFBundleExecutable</key>
            <string>MacOS/client</string>
            <key>CFBundleIconFile</key>
            <string>icon.icns</string>
            <key>CFBundleIdentifier</key>
            <string>client</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>client</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>0.0.0</string>
            <key>NSHighResolutionCapable</key>
            <string>True</string></dict>
          </plist>
          EOF
          cp install/static/build_files/macos/ReadMeFirst.rtf ./ReadMeFirst.rtf
          ln -s /Applications ./Applications
          cp install/static/build_files/macos/running_from_app "install/running_from_app"
          mv install/* "Hydrus Network.app/Contents/MacOS/"
          rm -rf install
          cd $GITHUB_WORKSPACE
          temp_dmg="$(mktemp).dmg"
          hdiutil create "$temp_dmg" -ov -volname "HydrusNetwork" -fs HFS+ -srcfolder "$GITHUB_WORKSPACE/build/$(head -n 1 triple.txt)/release"
          hdiutil convert "$temp_dmg" -format UDZO -o HydrusNetwork.dmg
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.1
        with:
          name: MacOS-DMG
          path: HydrusNetwork.dmg
          if-no-files-found: error
          retention-days: 2

  build-ubuntu:
    runs-on: ubuntu-18.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          path: hydrus
      - 
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      #- name: Cache Qt
      #  id: cache-qt
      #  uses: actions/cache@v1
      #  with:
      #    path: Qt
      #    key: ${{ runner.os }}-QtCache
      #- 
      #  name: Install Qt
      #  uses: jurplel/install-qt-action@v2
      #  with:
      #    install-deps: true
      #    setup-python: 'false'
      #    modules: qtcharts qtwidgets qtgui qtcore
      #    cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: APT Install
        run: |
          sudo apt-get update
          sudo apt-get install -y libmpv1
      - name: Pip Installer
        uses: BSFishy/pip-action@v1
        with:
          packages: pyinstaller
          requirements: hydrus/requirements.txt
      - name: PyInstaller
        run: |
          cp hydrus/static/build_files/linux/client.spec client.spec
          cp hydrus/static/build_files/linux/server.spec server.spec
          pyinstaller server.spec
          pyinstaller client.spec
      - name: Remove Files
        run: |
            while read line; do rm hydrus/${line} ; done < hydrus/static/build_files/linux/files_to_delete.txt
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Hydrus Ubuntu LTS Extract
          path: dist/client

  build-windows:
    runs-on: [windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: hydrus
      - uses: FedericoCarboni/setup-ffmpeg@v1
        id: setup_ffmpeg
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2.1.4
        with:
          path: Qt
          key: ${{ runner.os }}-QtCache
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          install-deps: true
          setup-python: 'false'
          modules: qtcharts qtwidgets qtgui qtcore
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Pip Installer
        uses: BSFishy/pip-action@v1
        with:
          packages: pyinstaller
          requirements: hydrus\requirements.txt
      - name: build with pyinstaller
        run: |
          move ${{ steps.setup_ffmpeg.outputs.ffmpeg-path }} hydrus\bin\
          move hydrus\static\build_files\windows\client-win.spec client-win.spec
          move hydrus\static\build_files\windows\server-win.spec server-win.spec
          pyinstaller server-win.spec
          pyinstaller client-win.spec
          dir -r
      - name: InnoSetup
        run: |
          move hydrus\static\build_files\windows\InnoSetup.iss InnoSetup.iss
          ISCC.exe InnoSetup.iss
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Windows-Extract
          path: dist\Hydrus Network
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Windows-Install
          path: dist\HydrusInstaller.exe
          if-no-files-found: error
          retention-days: 2