name: PyInstaller
on:
  pull_request:
    types: [closed]
    branches: master
  push:
    branches: master

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.0.1
      - name: rust-cargo
        uses: actions-rs/cargo@v1.0.1
        with:
          command: install
          args: pyoxidizer
      - name: Build Hydrus
        run: |
          cd $GITHUB_WORKSPACE
          basename $(rustc --print sysroot) | sed -e "s/^stable-//" > triple.txt
          pyoxidizer build --release
          cd build/$(head -n 1 triple.txt)/release
          mkdir -p "Hydrus Network.app/Contents/MacOS"
          mkdir -p "Hydrus Network.app/Contents/Resources"
          mkdir -p "Hydrus Network.app/Contents/Frameworks"
          mv install/static/icon.icns "Hydrus Network.app/Contents/Resources/icon.icns"
          cat > "Hydrus Network.app/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleDisplayName</key>
            <string>client</string>
            <key>CFBundleExecutable</key>
            <string>MacOS/client</string>
            <key>CFBundleIconFile</key>
            <string>icon.icns</string>
            <key>CFBundleIdentifier</key>
            <string>client</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>client</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>0.0.0</string>
            <key>NSHighResolutionCapable</key>
            <string>True</string></dict>
          </plist>
          EOF
          mv install/* "Hydrus Network.app/Contents/MacOS/"
          rm -rf install
          cd $GITHUB_WORKSPACE
          temp_dmg="$(mktemp).dmg"
          hdiutil create "$temp_dmg" -ov -volname "HydrusNetwork" -fs HFS+ -srcfolder "$GITHUB_WORKSPACE/build/$(head -n 1 triple.txt)/release"
          hdiutil convert "$temp_dmg" -format UDZO -o HydrusNetwork.dmg
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.1
        with:
          name: hydrus-dmg
          path: HydrusNetwork.dmg
          if-no-files-found: error
          retention-days: 10

  build-ubuntu:
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          path: hydrus
      - 
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      #- name: Cache Qt
      #  id: cache-qt
      #  uses: actions/cache@v1
      #  with:
      #    path: Qt
      #    key: ${{ runner.os }}-QtCache
      #- 
      #  name: Install Qt
      #  uses: jurplel/install-qt-action@v2
      #  with:
      #    install-deps: true
      #    setup-python: 'false'
      #    modules: qtcharts qtwidgets qtgui qtcore
      #    cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: APT Install
        run: |
          sudo apt-get update
          sudo apt-get install -y libmpv1 python3-chardet python3-html5lib python3-bs4 python3-lxml python3-nose python3-numpy python3-opencv python3-six python3-pil python3-psutil python3-openssl python3-yaml python3-requests python3-send2trash python3-service-identity python3-twisted ffmpeg python3-pyside2.qtwidgets python3-pyside2.qtcore python3-pyside2.qtgui python3-pyside2.qtcharts python3-lz4 python3-mock python3-httmock
      - name: Pip Installer
        uses: BSFishy/pip-action@v1
        with:
          packages: pyinstaller
          requirements: hydrus/requirements.txt
      - name: build with pyinstaller
        run: |
          cp hydrus/docker/pyinstaller/client.spec client.spec
          cp hydrus/docker/pyinstaller/server.spec server.spec
          pyinstaller server.spec
          pyinstaller client.spec
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Hydrus Ubuntu LTS Extract
          path: dist/client

  build-macos-sur-rust:
    if: false
    runs-on: [macos-11.0]
    steps:
      - uses: actions/checkout@v2
      - 
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.0.1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Rust Cargo
        uses: actions-rs/cargo@v1.0.1
        with:
          command: install
          args: pyoxidizer
      - name: Build Hydrus
        run: |
          cd $GITHUB_WORKSPACE
          basename $(rustc --print sysroot) | sed -e "s/^stable-//" > triple.txt
          pyoxidizer build --release
          cd build/$(head -n 1 triple.txt)/release/install
          tar -czf hydrus-macos.tgz *
          mv *.tgz $GITHUB_WORKSPACE
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.1
        with:
          name: Hydrus MacOS Big Sur (Rust) Extract
          path: hydrus-macos.tgz
          if-no-files-found: error

  build-macos-sur:
    if: false
    runs-on: [macos-11.0]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          path: hydrus
      - 
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: Qt
          key: ${{ runner.os }}-QtCache
      - 
        name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          install-deps: true
          setup-python: 'false'
          modules: qtcharts qtwidgets qtgui qtcore
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Pip Installer
        uses: BSFishy/pip-action@v1
        with:
          packages: pyinstaller
          requirements: hydrus/requirements.txt
      - name: build with pyinstaller
        run: |
          cp hydrus/docker/pyinstaller/client.spec client.spec
          cp hydrus/docker/pyinstaller/server.spec server.spec
          pyinstaller server.spec
          pyinstaller client.spec
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Hydrus MacOS Big Sur Extract
          path: dist/client

  build-macos-catalina:
    if: false
    runs-on: [macos-latest]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          path: hydrus
      - 
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: Qt
          key: ${{ runner.os }}-QtCache
      - 
        name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          install-deps: true
          setup-python: 'false'
          modules: qtcharts qtwidgets qtgui qtcore
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Pip Installer
        uses: BSFishy/pip-action@v1
        with:
          packages: pyinstaller
          requirements: hydrus/requirements.txt
      - name: build with pyinstaller
        run: |
          cp hydrus/docker/pyinstaller/client.spec client.spec
          cp hydrus/docker/pyinstaller/server.spec server.spec
          pyinstaller server.spec
          pyinstaller client.spec
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Hydrus MacOS Catalina Extract
          path: dist/client

  build-windows:
    runs-on: [windows-latest]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          path: hydrus
      - 
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: Qt
          key: ${{ runner.os }}-QtCache
      - 
        name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          install-deps: true
          setup-python: 'false'
          modules: qtcharts qtwidgets qtgui qtcore
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Pip Installer
        uses: BSFishy/pip-action@v1
        with:
          packages: pyinstaller
          requirements: hydrus\requirements.txt
      - name: build with pyinstaller
        run: |
          move hydrus\docker\pyinstaller\client-win.spec client-win.spec
          move hydrus\docker\pyinstaller\server-win.spec server-win.spec
          pyinstaller server-win.spec
          pyinstaller client-win.spec
          dir -r
      - name: InnoSetup
        run: |
          move hydrus\docker\InnoSetup.iss InnoSetup.iss
          ISCC.exe InnoSetup.iss
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Hydrus Windows Extract
          path: dist\Hydrus Network
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Hydrus Windows Installer
          path: dist\Hydrus Network - Windows - Installer.exe

  check-artifacts:
    if: false
    name: Check Artifacts
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos-catalina, build-macos-sur, build-ubuntu]
    steps:
      - name: Get All Artifacts
        uses: actions/download-artifact@v2
      - name: Display structure of downloaded files
        run: ls -R

  create-release:
    if: false
    name: Create Release Entry
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Get All Artifacts
        uses: actions/download-artifact@v2
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./my-artifact.zip
          asset_name: my-artifact.zip
          asset_content_type: application/zip